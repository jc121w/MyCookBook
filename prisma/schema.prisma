// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
  
model Recipe {
  id                   Int           @id 
  title                String
  image                String
  cheap                Boolean
  readyInMinutes       Int
  servings             Int 
  summary              String
  nutrients        Nutrient[]
  ingredients      Ingredient[]
  steps             Step[]
  
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
}

model Nutrient {
  id          Int       @id @default(autoincrement())
  name        String
  amount      Float
  unit        String
  recipe   Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId Int
}

model Ingredient {
  id          Int       @id @default(autoincrement())
  name        String
  amount      Float
  unit        String
  recipe   Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId Int
}


model Step {
  id            Int          @id @default(autoincrement())
  number        Int 
  stepIngredients   String[]
  step          String
  recipe   Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId Int
}

model UserReg {
  id         Int      @id @default(autoincrement())
  email      String   @unique
  username   String   @unique
  password   String
  createdAt  DateTime @default(now())
  supdatedAt DateTime @updatedAt
}
model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 