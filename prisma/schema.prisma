// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Recipes {
  id          Int      @id
  name        String
  src         String
  calories    Float
  description String?
  ingredients String 
  instructions String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Nutrients {
  id           Int     @id @default(autoincrement())
  protein      Float
  fat          Float
  carbohydrates Float
  fiber        Float
  sugar        Float
  sodium       Float
  vitamins     String  
  minerals     String  

}

model User {
  id Int @id @default(autoincrement())
  email String @unique
  username String @unique
  password String
  createdAt DateTime @default(now())
  supdatedAt   DateTime @updatedAt
}

model GoogleUser {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  sessions       Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? 
  access_token      String? 
  expires_at        Int? 
  token_type        String? 
  scope             String? 
  id_token          String? 
  session_state     String?
  user              GoogleUser    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         GoogleUser     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
